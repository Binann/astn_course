@page "/admin-instructor"
@inject IJSRuntime JSRuntime

<div id="db-wrapper">
	<!-- navbar vertical -->
	<!-- Sidebar -->
	<_Sidebar></_Sidebar>
	<!-- Page Content -->
	<main id="page-content">
		<_Header></_Header>
		<!-- Container fluid -->
		@if (!editInstructor)
		{
			<section class="container-fluid p-4">
				<div class="row">
					<!-- Page Header -->
					<div class="col-lg-12 col-md-12 col-12">
						<div class="border-bottom pb-3 mb-3 d-flex justify-content-between align-items-center">
							<div class="mb-2 mb-lg-0">
								<h1 class="mb-1 h2 fw-bold has-text-white">
									INSTRUCTOR
									<span class="fs-5">@(listUsers.Count > 0 ? $"({listUsers.Count})" : "")</span>
								</h1>
								<!-- Breadcrumb  -->
								<nav aria-label="breadcrumb">
									<ol class="breadcrumb">
										<li class="breadcrumb-item">
											<a href="../dashboard/admin-dashboard.html">Dashboard</a>
										</li>
										<li class="breadcrumb-item"><a href="#">User</a></li>
										<li class="breadcrumb-item active" aria-current="page">Instructor</li>
									</ol>
								</nav>
							</div>
							<div class="nav btn-group" role="tablist">
								<a @onclick="() => editInstructor = true" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#newCatgory">Add New Instructor</a>
							</div>
						</div>
					</div>
				</div>
				<div class="row">
					<div class="col-lg-12 col-md-12 col-12">
						<!-- Tab -->
						<div class="tab-content">
							<!-- Tab pane -->
							<div class="tab-pane fade show active" id="tabPaneGrid" role="tabpanel"
									 aria-labelledby="tabPaneGrid">

								<div class="row">
									<div class="col-lg-12 col-md-12 col-12">
										<div class="card mb-4">
											<div class="card-header border-bottom-0">
												<div class="d-flex align-items-center">
													<span class="position-absolute ps-3 search-icon"><i class="fe fe-search"></i></span>
													<input type="search" class="form-control ps-6" placeholder="Search Instructor">
												</div>
											</div>

											<div class="table-responsive border-0 overflow-y-hidden">
												<table class="table background-darkmode-dark is-fullwidth is-hoverable">
													<thead>
														<tr>
															<th>Instructor</th>
															<th>Email</th>
															<th>Date Created</th>
															<th>Role</th>
															<th>Status</th>
															<th>Handle</th>
														</tr>
													</thead>
													<tbody id="user_listing">
														<!-- user item -->
														@foreach (var instructor in listUsers)
														{
															<tr>
																<td>
																	<p class="">@instructor.full_name</p>
																</td>
																<td>
																	<p class="">@instructor.email</p>
																</td>
																<td>
																	<p class="">@instructor.date_create</p>
																</td>
																<td>
																	<p class="">@instructor.role</p>
																</td>
																<td>
																	<p>	
																		<i class="fa-solid fa-toggle-off"></i>
																	</p>
																</td>
																<td>
																	<p>
																		<span class="icon-text">
																			<a class="has-text-link">
																				<span class="icon">
																					<i class="fa-solid fa-pen"></i>
																				</span>
																			</a>
																			<a class="has-text-danger">
																				<span class="icon">
																					<i class="fa-solid fa-trash"></i>
																				</span>
																			</a>
																		</span>
																	</p>
																</td>
															</tr>

														}
														<!-- more user items... -->
													</tbody>
												</table>
											</div>
										</div>
									</div>
								</div>
							</div>						<!-- tab pane -->
						</div>
					</div>
				</div>
			</section>
		}
		else
		{
			<div class="has-text-dark " data-theme="dark">
				<section class="section p-4">
					<div class="container">
						<div class="columns">
							<div class="column is-offset-1 is-10">
								<div class="columns is-vcentered is-justify-content-space-between">
									<!-- Content -->
									<div class="mb-lg-0 pb-4 pt-4">
										<h1 class="title is-light">Add New Course</h1>
									</div>
									<div class="buttons">
										<a @onclick="() => editInstructor = false" class="button">Back to Course</a>
										<a href="" class="button is-dark">Save</a>
									</div>
								</div>
							</div>
						</div>
					</div>
				</section>
				<!-- Page Content -->
				<section class="section p-2">
					<div class="container">
						<div class="columns is-centered">
							<div class="column is-10">

								<!-- Stepper content -->
								<div>
									<div class="tab-content">
										<!-- Content one -->
										<div class="content ">
											<!-- Card -->
											<div class="field">
												<p class="is-6 has-text-white has-text-weight-bold">Email</p>
												<div class="control">
													<input @bind="user.email" class="input" type="email" id="email" name="email" required="">
												</div>
											</div>

											<div class="field">
												<p class="is-6 has-text-white has-text-weight-bold"> First Name  </p>
												<div class="control">
													<input @bind="user.first_name" class="input" type="text" name="firstname" required="">
												</div>
											</div>

											<div class="field">
												<p class="is-6 has-text-white has-text-weight-bold">Last Name </p>
												<div class="control">
													<input @bind="user.last_name" class="input" type="text" name="lastname" required="">
												</div>
											</div>

											<div class="field">
												<p class="is-6 has-text-white has-text-weight-bold">Password </p>
												<div class="control">
													<input @bind="user.password" class="input" type="password" id="password" name="password" required="">
												</div>
											</div>

											<div class="field">
												<p class="is-6 has-text-white has-text-weight-bold">Role </p>
												<div class="control">
													<div class="select">
														<select @onchange="(e) => ChangerRole(e)" id="role" name="role">
															<option value="0">Student</option>
															<option value="1">Administrator</option>
															<option value="2">Instructor</option>
														</select>
													</div>
												</div>
											</div>
											@if (!checkValidate && !string.IsNullOrEmpty(message))
											{
												<div class="has-text-danger">
													<p>@message</p>
												</div>
											}
											else
											{
												<div class="has-text-success">
													<p>@message</p>
												</div>
											}

											<div class="field is-flex pt-2">
												<div class="control is-right">
													<a @onclick="UpdateAccount" class="button is-link" type="submit">Add Account</a>
												</div>
											</div>
										</div>
										<!-- Content two -->
									</div>
								</div>
							</div>
						</div>
					</div>
				</section>
			</div>

		}
	</main>
</div>
@code {
	[CascadingParameter]
	public MainLayout Layout { get; set; }

	private bool editInstructor = false;

	private UserModel user = new();
	private bool checkValidate;

	private string message;
	private List<UserModel> listUsers = new();

	protected override async Task OnInitializedAsync()
	{
		listUsers = await DbUser.GetAll();
		listUsers = listUsers.Where(x => x.role != 0).ToList();
	}
	private void ChangerRole(ChangeEventArgs e)
	{
		var role = int.Parse(e.Value.ToString());
	}

	private async Task<bool> UpdateAccount()
	{
		checkValidate = false;
		if (string.IsNullOrEmpty(user.email))
		{
			message = "Please input Email";
			return false;
		}
		if (string.IsNullOrEmpty(user.first_name))
		{
			message = "Please input First Name";
			return false;
		}
		if (string.IsNullOrEmpty(user.last_name))
		{
			message = "Please input Last Name";
			return false;
		}
		if (string.IsNullOrEmpty(user.password))
		{
			message = "Please input Password";
			return false;
		}
		if (string.IsNullOrEmpty(user.id))
		{
			await DbUser.Create(user);
			message = "Create Account Successfull";
			user = new();
			checkValidate = true;
		}
		else
		{
			await DbUser.Update(user);
			message = "Update Account Successfull";
			user = new();
			checkValidate = true;
		}

		return true;
	}


}
